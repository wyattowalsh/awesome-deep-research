[project]
name = "awesome-deep-research"
version = "0.1.0"
description = "A curated comparison of LLM-based deep research tools"
authors = [
    {name = "Wyatt Walsh", email = "ww@example.com"},
]
dependencies = [
    "loguru>=0.7.3",
    "pandas>=2.0.0",
    "rich>=13.9.4",
    "tabulate>=0.9.0",
    "aiohttp>=3.9.3",
]
requires-python = ">=3.9,<=3.13.2"

[dependency-groups]
format = [
    "autoflake>=2.3.1",
    "autopep8>=2.3.2",
    "black>=25.1.0",
    "isort>=6.0.0",
    "yapf>=0.43.0",
]
lint = [
    "mypy>=1.15.0",
    "pylint>=3.3.4",
    "ruff>=0.9.6",
]
test = [
    "hypothesis>=6.125.3",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.5",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
    "pytest-emoji>=0.2.0",
    "pytest-html>=4.1.1",
    "pytest-icdiff>=0.9",
    "pytest-instafail>=0.5.0",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "pytest-timeout>=2.3.1",
    "pytest-xdist[all]>=3.6.1",
]

[tool.pytest.ini_options]
addopts = "-n auto --verbose --hypothesis-show-statistics --html=logs/report.html --self-contained-html --emoji --instafail --cov=scripts --cov-append --cov-report html:logs/coverage --cov-fail-under=90"
testpaths = ["tests"]
console_output_style = "progress"
junit_logging = "all"
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
log_cli_level = "DEBUG"
log_file = "logs/pytest-logs.txt"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
log_file_level = "DEBUG"
log_format = "%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
log_level = "DEBUG"
required_plugins = ["pytest-sugar", "pytest-html", "pytest-emoji", "pytest-icdiff", "pytest-instafail", "pytest-timeout", "pytest-benchmark", "pytest-cov"]
timeout = 500
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
data_file = "logs/.coverage"
source = ["scripts"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
]
fail_under = 90

[tool.isort]
profile = "black"
src_paths = ["scripts", "tests"]

[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
in-place = true
ignore-init-module-imports = true

[tool.yapf]
based_on_style = "pep8"
space_inside_brackets = true
spaces_around_dict_delimiters = true
spaces_around_list_delimiters = true
spaces_around_power_operator = true
spaces_around_tuple_delimiters = true
spaces_before_comment = "15, 20"

[tool.ruff]
line-length = 100
lint.select = ["E", "F", "W", "C", "B", "A", "I"]
lint.ignore = [
  "E201", "E202", "E203", "E501", "B017", "I001"
]

[tool.mypy]
python_version = "3.13"
strict = true
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
disable_error_code = ["no-untyped-def", "valid-type"]

[tool.pylint]
max-line-length = 100
disable = [
  "C0114", "C0115", "C0116",  # Disable missing docstring warnings for simplicity
  "R0903",                     # Too few public methods
  "C0301",                     # Line too long
  "E0213",                     # No-self-argument error (for static methods, Pydantic)
  "W0621",                     # Redefining name
  "W0613",                     # Unused arguments in tests
  "R0801",                     # Duplicate code
  "R1705",                     # Unnecessary "else" after "return"
]
